'use strict';

const express = require('express');
const router = express.Router();
const { asyncHandler } = require('../middleware/asyncHandler');
const { User, Course } = require('../models'); 
const { check, validationResult } = require('express-validator');
const base64Credentials = Buffer.from('user:password').toString('base64');

// Middleware to add Authorization header to requests
const addAuthorizationHeader = (req, res, next) => {
  req.headers.authorization = `Basic ${base64Credentials}`;
  next();
};

// Apply the middleware to all routes in this router
router.use(addAuthorizationHeader);

// POST /api/courses route
router.post('/courses', [
  check('title')
    .notEmpty()
    .withMessage('Please enter a valid course title.'),
  check('description')
    .notEmpty()
    .withMessage('Please enter a valid course description.'),
],
asyncHandler(async (req, res) => {
  const result = validationResult(req);

  if (result.isEmpty()) {
    try {
      const course = await Course.build(req.body);
      const user = await User.findByPk(req.body.userId);

      if (!user) {
        res.status(404).json({ message: 'User not found' });
      }

      await course.save();
      res.status(201).location(`/courses/${course.id}`).end();
    } catch (error) {
      if (error.name === "SequelizeValidationError" || error.name === "SequelizeUniqueConstraintError") {
        const errors = error.errors.map(err => err.message);
        res.status(400).json({ errors });
      } else {
        throw error; //error caught in the asyncHandler's catch block
      }
    }
  } else {
    res.status(400).send({ errors: result.array() }); 
  }
}));

// GET /api/courses route
router.get('/courses', asyncHandler(async (req, res) => {
  try {
    const courses = await Course.findAll({
      include: {
        model: User,
      }
    });
      res.status(200).json(courses);
  } catch (error) {
    console.error('Error fetching courses:', error);
    res.status(500).json({ message: 'Internal Server Error' });
  }
}));

// GET /api/courses/:id route
router.get('/courses/:id', asyncHandler(async (req, res) => {
    const courseId = req.params.id;
    console.log('Requested Course ID:', courseId);
    const course = await Course.findByPk(courseId, {
      include: {
        model: User,
      }
    });
    if (course) {
    console.log('Found Course:', course); 
    return course; 
  } else {
    console.log('Course not found'); 
    throw new Error('Course not found.'); 
  }
}));

// PUT /api/courses/:id route
router.put('/courses/:id', [
  check('title')
    .notEmpty()
    .withMessage('Please enter a valid course title.'),
  check('description')
    .notEmpty()
    .withMessage('Please enter a valid course description.'),
],
  asyncHandler(async (req, res) => {
    const result = validationResult(req);

    if (result.isEmpty()) {
      let course;
      try {
        course = await Course.findByPk(req.params.id);
        if (course) {
          await course.set(req.body);
          const user = await User.findByPk(req.body.userId);

          // check if user exists before Course can be saved
          if (!user) {
            res.status(404).json({ message: 'User not found' });
          }

          await course.save();
          res.status(204).location(`/courses/${course.id}`).end();
        } else {
          res.status(404).json({ message: 'Course not found.' });
        }
      } catch (error) {
        if (error.name === "SequelizeValidationError" || error.name === "SequelizeUniqueConstraintError") {
          const errors = error.errors.map(err => err.message);
          res.status(400).json({ errors });
        } else {
          throw error; //error caught in the asyncHandler's catch block
        }
      }
    } else {
      res.status(400).send({ errors: result.array() }); // runs if empty title or description
    }
  })
);

// DELETE /api/courses/:id route
router.delete('/courses/:id', asyncHandler(async (req, res) => {
  const course = await Course.findByPk(req.params.id);
  if (course) {
    await course.destroy();
    res.status(204).end();
  } else {
    res.status(404).json({ message: 'Course not found' });
  };
}));

module.exports = router;




